services:
  # Infrastructure services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  prod-db:
    image: postgres:15
    container_name: summerville-prod-db
    environment:
      POSTGRES_USER: ${PROD_DB_USER}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
      POSTGRES_DB: ${PROD_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - prod-db-data:/var/lib/postgresql/data
      - ./backend/initDB:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  sim-db:
    image: postgres:15
    container_name: summerville-sim-db
    environment:
      POSTGRES_USER: ${SIM_DB_USER}
      POSTGRES_PASSWORD: ${SIM_DB_PASSWORD}
      POSTGRES_DB: ${SIM_DB_NAME}
    ports:
      - "5433:5432"  # Different host port to avoid conflict
    volumes:
      - sim-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: summerville-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: summerville-app
    ports:
      - "8080:8080"
    environment:
      - PROD_DB_HOST=prod-db
      - PROD_DB_PORT=5432
      - SIM_DB_HOST=sim-db
      - SIM_DB_PORT=5432
      - KAFKA_BROKER=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./simData/log_data:/root/simData/log_data
      - ./simData/test_data:/root/simData/test_data
    depends_on:
      prod-db:
        condition: service_healthy
      sim-db:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  prod-db-data:
  sim-db-data:
  redis-data: