services:
  # Infrastructure services
  postgres:
    image: postgres:latest
    container_name: summerville-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Week7890
      - POSTGRES_DB=summervilledb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: summerville-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: summerville-app
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKER=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_ENV=prod
      - PROD_DB_USER=postgres
      - PROD_DB_PASSWORD=Week7890
      - PROD_DB_NAME=summervilledb
      - PROD_DB_HOST=postgres
      - PROD_DB_PORT=5432
      - PROD_DB_SSLMODE=disable
      - PORT=8080
      - SERVER_ADDR=0.0.0.0:8080
    volumes:
      - ./backend/initDB:/root/backend/initDB
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  redis-data:
  postgres-data: